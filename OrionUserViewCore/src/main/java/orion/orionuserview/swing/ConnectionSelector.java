/*
 * ConnectionSelector.java
 *
 * Created on Oct 11, 2010, 4:11:58 PM
 */
package orion.orionuserview.swing;

import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import orion.orionuserview.DatabaseDef;
import orion.orionuserview.DatabaseDefFactory;
import orion.orionuserview.utils.DriverDef;
import orion.orionuserview.utils.DriversUtils;

/**
 *
 * @author sl
 */
public class ConnectionSelector extends javax.swing.JPanel {

    private final static Map<String, Boolean> booleanValues = new HashMap<String, Boolean>();
    private Properties driverProperties = new Properties();
    private DriverPropertyInfo[] driverPropertyInfos;
    private TableCellEditor[] tableCellEditors;
    private Globals globals;
    private final ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(ConnectionSelector.class);

    static {
        booleanValues.put("true", true);
        booleanValues.put("false", false);
        booleanValues.put("yes", true);
        booleanValues.put("no", false);
    }

    /** Creates new form ConnectionSelector */
    public ConnectionSelector(Globals globals) {
        this.globals = globals;
        initComponents();
        propertiesControl.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                propertiesControl.getColumnModel().getColumn(1).setCellEditor(tableCellEditors[propertiesControl.getSelectedRow()]);
                descriptionControl.setText(driverPropertyInfos[propertiesControl.getSelectedRow()].value + " | "+driverPropertyInfos[propertiesControl.getSelectedRow()].description);
            }
        });
        driverChanged();
        globals.addInfo("Настройте подключение к базе данных");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        driverControl = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        propertiesControl = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionControl = new javax.swing.JTextArea();
        _URLControl = new javax.swing.JTextField();
        userControl = new javax.swing.JTextField();
        passwordControl = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        driverControl.setModel(new javax.swing.DefaultComboBoxModel(DriversUtils.getAvailableDriverNames().toArray()));
        driverControl.setName("driverControl"); // NOI18N
        driverControl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                driverControlItemStateChanged(evt);
            }
        });

        jLabel1.setText("Driver");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Properties");
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        propertiesControl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Параметр", "Значение"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propertiesControl.setName("propertiesControl"); // NOI18N
        jScrollPane1.setViewportView(propertiesControl);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        descriptionControl.setColumns(20);
        descriptionControl.setEditable(false);
        descriptionControl.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        descriptionControl.setLineWrap(true);
        descriptionControl.setRows(5);
        descriptionControl.setToolTipText("Описание параметра");
        descriptionControl.setFocusable(false);
        descriptionControl.setName("descriptionControl"); // NOI18N
        jScrollPane2.setViewportView(descriptionControl);

        _URLControl.setName("_URLControl"); // NOI18N

        userControl.setName("UserControl"); // NOI18N

        passwordControl.setName("PasswordControl"); // NOI18N

        jLabel3.setText("URL");
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText("User");
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText("Password");
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(ConnectionSelector.class, this);
        jButton1.setAction(actionMap.get("testConnection")); // NOI18N
        jButton1.setText("Проверка");
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("connect")); // NOI18N
        jButton2.setText("Соединение");
        jButton2.setName("jButton2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(driverControl, 0, 464, Short.MAX_VALUE)
                            .addComponent(userControl, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                            .addComponent(_URLControl, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                            .addComponent(passwordControl, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 326, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driverControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_URLControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void driverControlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_driverControlItemStateChanged
        driverChanged();
}//GEN-LAST:event_driverControlItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField _URLControl;
    private javax.swing.JTextArea descriptionControl;
    private javax.swing.JComboBox driverControl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField passwordControl;
    private javax.swing.JTable propertiesControl;
    private javax.swing.JTextField userControl;
    // End of variables declaration//GEN-END:variables

    void driverChanged() {
        try {
            DriverDef dd = DriversUtils.getDriverDefs().get((String) driverControl.getSelectedItem());
            _URLControl.setText(dd.getURLFormat());
            driverPropertyInfos = dd.getDriver().getPropertyInfo(dd.getURLFormat(), driverProperties);
            //Удалим user и password
            List<DriverPropertyInfo> newDriverPropertyInfos = new ArrayList<DriverPropertyInfo>();
            for (int i = 0; i < driverPropertyInfos.length; i++) {
                if (!"user".equalsIgnoreCase(driverPropertyInfos[i].name)
                        && !"password".equalsIgnoreCase(driverPropertyInfos[i].name)) {
                    newDriverPropertyInfos.add(driverPropertyInfos[i]);
                }
            }
            driverPropertyInfos=newDriverPropertyInfos.toArray(new DriverPropertyInfo[0]);
            tableCellEditors = new TableCellEditor[driverPropertyInfos.length];
            DefaultTableModel model = (DefaultTableModel) propertiesControl.getModel();
            model.setRowCount(driverPropertyInfos.length);
            for (int i = 0; i < driverPropertyInfos.length; i++) {
                model.setValueAt(driverPropertyInfos[i].name, i, 0);
                model.setValueAt(driverPropertyInfos[i].value, i, 1);
                //Если дан набор вариантов значений заменим редактор
                if (driverPropertyInfos[i].choices != null) {
                    //Если булево поле
                    if (driverPropertyInfos[i].choices.length == 2 || driverPropertyInfos[i].choices.length == 4) {
                        Boolean ok = true;
                        for (String s : driverPropertyInfos[i].choices) {
                            if (!booleanValues.containsKey(s.toLowerCase())) {
                                ok = false;
                                break;
                            }
                        }
                        if (ok) {
                            tableCellEditors[i] = new CheckBoxCellEditor();
                        }
                    } else {
                        tableCellEditors[i] = new ComboBoxCellEditor(driverPropertyInfos[i].choices);
                    }
                } else {
                    tableCellEditors[i] = new TextCellEditor();
                }

                propertiesControl.editCellAt(i, 1);
            }


        } catch (SQLException ex) {
            throw new RuntimeException(ex.getMessage());
        }
    }

    private void prepareDriverProperties() {
        driverProperties.setProperty("user", userControl.getText());
        driverProperties.setProperty("password", passwordControl.getText());
    }

    static class CheckBoxCellEditor extends DefaultCellEditor {

        public CheckBoxCellEditor() {
            super(new JCheckBox());
            JCheckBox checkBox = (JCheckBox) getComponent();
            checkBox.setHorizontalAlignment(JCheckBox.CENTER);
        }
    }

    static class TextCellEditor extends DefaultCellEditor {

        public TextCellEditor() {
            super(new JTextField());
        }
    }

    static class ComboBoxCellEditor extends DefaultCellEditor {

        public ComboBoxCellEditor(String[] choices) {
            super(new JComboBox());
            JComboBox jComboBox = (JComboBox) getComponent();
            jComboBox.setModel(new javax.swing.DefaultComboBoxModel(choices));
            jComboBox.setEditable(false);
        }
    }

    @Action
    public void testConnection() {
        prepareDriverProperties();
        try {
            DriverManager.getConnection(_URLControl.getText(), driverProperties);
            globals.addInfo(resourceMap.getString("MESSAGE.TestConnectonPassed"));
        } catch (Exception ex) {
            //TODO сделать более информативно
            globals.addError(resourceMap.getString("MESSAGE.TestConnectonFiled"));
        }
    }

    @Action
    public void connect() {
        prepareDriverProperties();
        try {
            DatabaseDef dd = DatabaseDefFactory.build(_URLControl.getText(), driverProperties);
            dd.connect();
            globals.setDatabaseDef(dd);
        } catch (SQLException ex) {
            //TODO сделать более информативно
            globals.addError(resourceMap.getString("MESSAGE.ConnectFiled"));
        }
    }

    @Action
    public void saveDatabaseDef() {
    }
}
