/*
 * RelationsSelector.java
 *
 * Created on Oct 7, 2010, 6:54:49 PM
 */
package orion.orionuserview.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.*;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.table.*;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import orion.orionuserview.*;

/**
 *
 * @author sl
 */
public class RelationsSelector extends javax.swing.JPanel {

    private Globals globals;
    private static final ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(SimpleConnectionSelector.class);
    private DefaultTableModel model = new javax.swing.table.DefaultTableModel(
            null,
            new String[]{"Таблица", "E      D      R      H "}) {

        Class[] types = new Class[]{Relation.class, Relation.class};

        @Override
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }
    };

    /** Creates new form RelationsSelector */
    public RelationsSelector(final Globals globals) {
        this.globals = globals;
        initComponents();
        final RelationCellRenderer renderer=new RelationCellRenderer(globals);
        relationsTable.setDefaultEditor(Relation.class, new RelationCellEditor(globals));
        relationsTable.setDefaultRenderer(Relation.class, renderer);
        relationsTable.getColumnModel().getColumn(1).setMinWidth(160);
        relationsTable.getColumnModel().getColumn(1).setMaxWidth(160);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        relationsTable = new javax.swing.JTable();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        relationsTable.setModel(model);
        relationsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        relationsTable.setName("relationsTable"); // NOI18N
        relationsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(relationsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        fillTable();
    }//GEN-LAST:event_formComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable relationsTable;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        try {
            List<Relation> relations = new ArrayList(globals.getDatabaseDef().getRelations());
            Collections.sort(relations, new Comparator<Relation>() {

                @Override
                public int compare(Relation o1, Relation o2) {
                    return UIUtils.relationPresentableNameForAdmin(globals, o1).compareToIgnoreCase(UIUtils.relationPresentableNameForAdmin(globals, o2));
                }
            });
            model.setRowCount(relations.size());
            int i = 0;
            for (Relation relation : relations) {
                model.setValueAt(relation, i, 0);
                model.setValueAt(relation, i, 1);
                i++;
            }
        } catch (SQLException ex) {
            globals.addError(resourceMap.getString("MESSAGE.ErrorByFetchRelations"));
        }
    }

    static class RelationCellEditor extends AbstractCellEditor
            implements TableCellEditor {

        private RelationCellRenderer editorComponent;
        private EditorListener editorListener = new EditorListener();

        public RelationCellEditor(Globals globals) {
            editorComponent = new RelationCellRenderer(globals);
            editorComponent.setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
            for (int i = 0; i < RelationCellRenderer.buttonsCount; i++) {
                editorComponent.radioButtons[i].addActionListener(editorListener);
            }
        }

        @Override
        public Object getCellEditorValue() {
            return editorComponent.getRelation();
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            switch (column) {
                case 1:
                    if (isSelected) {
                        editorComponent.setForeground0(table.getSelectionForeground());
                        editorComponent.setBackground0(table.getSelectionBackground());
                    } else {
                        editorComponent.setForeground0(table.getForeground());
                        editorComponent.setBackground0(table.getBackground());
                    }
                    editorComponent.setRelation((Relation) value);
                    return editorComponent;
            }
            return null;
        }

        class EditorListener implements ActionListener, ItemListener, Serializable {

            @Override
            public void actionPerformed(ActionEvent e) {
                fireEditingStopped();
            }

            @Override
            public void itemStateChanged(ItemEvent e) {
                fireEditingStopped();
            }
        }
    }

    static class RelationCellRenderer extends JPanel implements TableCellRenderer {

        public static final int buttonsCount = 4;
        public final JRadioButton[] radioButtons = new JRadioButton[buttonsCount];
        public static final RelationType[] relationTypes = new RelationType[]{
            RelationType.ENTITY,
            RelationType.DEPENDENT,
            RelationType.REFERENCE_BOOK,
            RelationType.HIDDEN};
        private final ButtonGroup group = new ButtonGroup();
        private Relation relation;
        private static final Border noFocusBorder = new EmptyBorder(1, 1, 1, 1);
        private static final Border jRadioButtonBorder = new EmptyBorder(0, 0, 0, 0);
        private static final DefaultTableCellRenderer stringRenderer = new DefaultTableCellRenderer();
        private final Globals globals;

        public RelationCellRenderer(Globals globals) {
            setLayout(new FlowLayout(FlowLayout.CENTER, 20, 0));
            this.globals = globals;
            for (int i = 0; i < buttonsCount; i++) {
                radioButtons[i] = new JRadioButton();
                group.add(radioButtons[i]);
                add(radioButtons[i]);
                radioButtons[i].setBorder(jRadioButtonBorder);
            }
        }

        public void setBackground0(Color bg) {
            super.setBackground(bg);
            for (JRadioButton rb : radioButtons) {
                rb.setBackground(bg);
            }
        }

        public void setForeground0(Color fg) {
            super.setForeground(fg);
            for (JRadioButton rb : radioButtons) {
                rb.setForeground(fg);
            }
        }

        public Relation getRelation() {
            for (int i = 0; i < buttonsCount; i++) {
                if (radioButtons[i].isSelected()) {
                    relation.setRelationType(relationTypes[i]);
                    break;
                }
            }
            return relation;
        }

        public void setRelation(Relation relation) {
            for (int i = 0; i < buttonsCount; i++) {
                if (relationTypes[i] == relation.getRelationType()) {
                    radioButtons[i].setSelected(true);
                    break;
                }
            }
            this.relation = relation;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (value == null) {
                return this;
            }
            Relation rel = (Relation) value;
            switch (column) {
                case 0:
                    JLabel label=(JLabel) stringRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    label.setText(UIUtils.relationPresentableNameForAdmin(globals, rel));
                    label.setForeground(rel.getSourceType() == RelationSourceType.TABLE ? Color.BLACK : Color.GRAY);
                    return label;
                case 1:
                    if (isSelected) {
                        setForeground0(table.getSelectionForeground());
                        setBackground0(table.getSelectionBackground());
                    } else {
                        setForeground0(table.getForeground());
                        setBackground0(table.getBackground());
                    }

                    setRelation((Relation) value);

                    if (hasFocus) {
                        setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
                    } else {
                        setBorder(noFocusBorder);
                    }
                    return this;
            }
            return null;
        }
    }
}
